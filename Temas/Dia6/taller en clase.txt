** Callbacks **

1) map

Crear una función map que acepte un array y un callback y que:

    -por cada elemento del array ejecute el callback pasándole dicho elemento como argumento
    -obtenga el resultado
    -lo pushee a un nuevo array
    -devuelva el array final con el resultado de cada una de las llamadas al callback.

Ejemplo:

    const numeros = [1, 2, 3]
    const duplicar = x => x * 2
    map(numeros, duplicar) // [2, 4, 6]

2) filter

Crear una función filter que acepte un array y un callback y que:

    -por cada elemento del array ejecute el callback pasándole dicho elemento como argumento
    -si dicho callback devuelve true, pushea el elemento a un nuevo array
    -devuelva el array final con los elementos que pasaron el "filtro".

Ejemplo:

    const numeros = [10, 2, 3, 40, 33, 50]
    const multiploDe10 = x => x % 10 === 0
    filter(numeros, multiploDe10) // [10, 40, 50]

3) find

Crear una función find que acepte un array y un callback y que:

    -por cada elemento del array ejecute el callback pasándole dicho elemento como argumento
    -devuelva el elemento pasado como argumento del primer callback que devuelva true
    -si ningún callback devuelve true, devuelva undefined

Ejemplo:

    const numeros = [8, 2, 3, 40, 33, 50]
    const multiploDe10 = x => x % 10 === 0
    find(numeros, multiploDe10) // 40

4) findIndex

    -Crear una función findIndex que acepte un array y un callback y que:
    -por cada elemento del array ejecute el callback pasándole dicho elemento como argumento
    -devuelva el índice del elemento pasado como argumento del primer callback que devuelva true
    -si ningún callback devuelve true, devuelva undefined

Ejemplo:

    const numeros = [8, 2, 3, 40, 33, 50]
    const multiploDe10 = x => x % 10 === 0
    find(numeros, multiploDe10) // 3